                              CACHE
                            =========
A cache is an information technology for the temporary storage(Caching) of web documents, such as web pages, images, and other types of Web multimedia, to reduce server lag.

Caching is one of those methods which a website implements to become faster. IT is cost efficient and saves CPU processing time.

Django comes with a robust cache system that lets you save dynamic pages so they don't have to be calculated for each request.

You can cache the output of specific views, you can cache only the pieces that are difficult to produce, or you can cache your entire site.

Following are the options of caching:-
-> Database Caching
-> File System Caching
-> Local Memory Caching

How to implement Caching
==========================
-> The per-site cache - Once the cache is set up, the simplest way to use caching is to cache your entire site.
-> The per-view cache - A more granular way to use the caching framework is by caching the output of individual views.
-> Template fragment caching - This gives you more control what to cache.

                            The per-site cache
                            ==================
The per-site cache - Once the cache is set up,the simplest way to use caching is to cache your entire site.
MIDDLEWARE=[
    'django.middleware.cache.UpdateCacheMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.cache.FetchFromCacheMiddleware',
]
order also need to maintained.
CACHE_MIDDLEWARE_ALIAS - The cache alias to use for storage.
CACHE_MIDDLEWARE_SECONDS - The number of seconds each page should be cached.
CACHE_MIDDLEWARE_KEY_PREFIX - The prefix to use for cache keys.

                    Database Caching
                    -----------------
Django can store its cached data in your database. This works best if you've got a fast, well-inexed database server.
CACHES={
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION':"my_cache_table', ->The name of the database table. This name can be whatever you want, as long as it's valid table name that's not already being used in your database.
    }
}

Before using the database cache, you must create the cache table with this command:
python manage.py createcachetable

This creates a table in your database that is in the proper format that Django's database-cache system expects. The name of table is taken from LOCATION.
If you are using multiple database casches, createcachetable creates one table for each cache.

                  Cache Arguments
                  ================
Each cache backend can be given additional Arguments to control caching behavior.
TIMEOUT: The default timeout, in seconds, to use for the cache. This arugment defaults(5 mintues). You can set Timeout to None so that, by default, cache keys never expire. A value of 0 causes keys to immediately expire.
OPTIONS: Any options that should be passed to the cache backed. The list of valid options will vary with each backed, and cache backends backed by a third-party library will pass their options directly to the underlying cache library.

Cache backeds that implement their own culling strategy(ie. the locmen, filesystem and database backends) will honor the following options:

MAX_ENTRIES: The maximum number of entries allowed in the cache before old values are deleted. This arugment defaults to 300.

CULL_FREQUENCY: The fraction of entries that are culled when MAX_ENTRIES is reached. The actual ratio is 1/CULL_FREQUENCY, so set CULL_FREQUENCY to 2 to cull half entries when MAX_ENTRIES is reached. This arugment should be an interger and defaults to 3.
A value of 0 for CULL_FREQUENCY means that the entire cache will be dumped when MAX_ENTRIES is reached. On some backedns(database in particular) this makes culling much faster at the expense of more cache misses.

CACHES={
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION':"enroll_cache',
        'TIMEOUT': 60, -> The default timeout, in seconds, to use for the
        'OPTIONS': {
            'MAX_ENTRIES': 1000, -> The maximum number of entries allowed in the cache before
            'CULL_FREQUENCY': 2, -> The fraction of entries that are culled when MAX
            }
    }
}

                         Filesystem Caching
                         ==================
The file-based backed serializes and stores end cache value as a separate file.
CACHES = {
    'default'={
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': '/path/to/memcached.sock', # Absolute directory path where all cache file will be store.
    }
}

Make sure the directory pointed-to by this setting exists and is readable and writable by the system user under which your web server runs,
for apache server:-
CACHES={
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': '/var/tmp/django',
}
}

                            Local Memory Caching
                            ====================
This is the default cache if another is not specified in your settings file. This cache is per-process and thread-safe.
Each process will have its own private cache instance, which means no cross-process caching is possible. This obviously also means the local memory cache isn't particularly memory-efficient.
CACHES = {
'default':{
    'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    'LOCATION': 'unique-sonflake',  #the cache location is used to identify individual memory stores.
}
}