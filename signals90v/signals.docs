                  Signals
                --------------

The signals are utitities that allow us to associate events with actions.
Signals allow certain senders to notify a set of receivers that some action has taken place.
-> Login and Logout Signals
-> Model Signals
-> Management Signals
-> Request/Response Signals
-> Test Signals
-> Database Wrappers.

Three imporatant part of Signals
Sender - Who will send Signals
Signal - Signal
Receiver - Who will receive Signal

Receiver Function- This function takes a sender argument, along with wild card keyword arguments(**kwargs); all signal handlers must take these arguments. A receiver can be any Python function or method.
def receiver_func(sender, request, user, **kwargs):
    pass

Connecting/Registering Receiver Function - There are two ways you ca connect a receiver to a signal:-
>Manual Connect Route
>Decorator

Manual Connect Route - To receive a signal, register a receiver function using the Signal.connect() method. The receiver function is called when the signal is sent. All of the signal's receiver functions are called one at a time, in the order they were registered.

Signal.connect(receiver_func, sender= None, weak= True, dispatch_uid =None)
Where,
receiver_func - The callback function which will be connected to signal.
sender - The sender of the signal. If None, the signal will be sent to all receivers.
weak - If True, the receiver will be weakly referenced. This means that the receiver will not
prevent the sender from being garbage collected.
dispatch_uid - A unique identifier for a signal receiver in cases where duplicate signals may be sent.

Decorator - @receiver(signal or list of signal, sender)
def receiver_func(request):


Built-in Signals
----------------
Login and Logout Signals - The auth framework uses the following signals that can be used for notification when a user logs in or out.

django.contrib.auth.signals
> user_logged_in(sender, user, request, **kwargs) - Sent when a user logs in successfully.
sender - The class of the user that just logged in.
user - The user that just logged in.
request - The request that was made to log in.

> user_logged_out(sender, request, user) - Sent when the logout method is called.
sender - The class of the user that just logged out.
request - The request that was made to log out.
user - The user that just logged out.

> user_login_failed(sender, credentials, request) - Sent when the user failed to login successfully.
sender - The class of the user that tried to log in.
credentials - The credentials that were used to try to log in.
request - The request that was made to log in.

Model Signals- A set of signals sent by the model system.
--------------

django.db.models.signals
pre_int(sender, args, kwargs) - Whenever you instantiate a Django model, this signal is sent at beginning of the model's __init__() method.

sender - The model class that just had an instance created.
args - The arguments that were passed to the model's __init__() method.
kwargs - The keyword arguments that were passed to the model's __init__() method.

post_init(sender, instance)- Like pre_inti, but this one is sent when the__init__() method finishes.
sender - The model class that just had an instance created.
instance - The instance that was created.

pre_save(sender, instance, raw, using, update_fields) - This is sent at the beginning of a model's save() method.
sender = The model class
instance - the actual instance being saved.
raw - A boolean; True if the model is saved exactly as presented (i.e. when loading a fixture). One should not query/modify other records in the database as the database might not be in a consistent state yet.
using - The database alias being used to save the model.
update_fields - The set of fields to update as passed to Model.save(), or None if update_fields wasn't passed to save().

post_save(sender, instance, raw, using, update_fields) - Like pre_save, but sent
at the end of the save() method.
created -A boolean;True if a new record was created. False means update data.

pre_delete(sender, insatnce, using)- Sent at the beginning of a model's delete() method and a queryset's delete() method.

post_delete(sender, instance, using)- Like pre_delete, but sent at the end of a model's delete() method and a queryset's delete() method.

m2m_changed(sender)

class_prepared(sender)

Request/Response Signals - Signals sent by the core framework when processing a request.
django.core.signals

request_started(sender, environ)- Sent when Django begins processing an HTTP request.
sender - The handler class - e.g. django.core.handler.wsgi.WsgiHandler - that handled the request.
environ - The environ dictionary provided to the request.
request_finished(sender)- Sent when Django finishes processing an HTTP request.
sender - The handler class - e.g. django.core.handler.wsgi.WsgiHandler - that handled
the request.

got_request_exception(sender, request) - This signal is sent whenever Django encounters an exception while processing an incoming HTTP request.
sender - The handler class - Unused(Always none)
request - The HttpReuest object.

Management Signals - Signals sent by django-admin
django.db.models.signals

pre_migarte(sender, app_config, verbosity, interactive, using, plan, apps)
sender - The app config that is being migrated.
app_config - The app config that is being migrated.
verbosity - The verbosity level of the migration process.


post_migrate(Sender, app_config, verbosity, interactive, using, plan, apps):

Database Wrappers- Signals sent by the database wrapper when a database connection is initiated.
django.db.backends.signals
connection_Created - sent when the database wrapper makes the initial connection to the databse. This is particularly useful if you'd like to send any psot connection commands to the SQL backend.
sender and connection