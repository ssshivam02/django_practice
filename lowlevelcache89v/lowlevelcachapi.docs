Sometime, caching an entire rendered page doesn't gain you very much and is, in fact, inconvenient overkill.

For cases like this, Django exposes a low-level cache API. you can use this API to store objects in the cache with any level of granularity you like. You can cache any Python object that can be pickled safely:strings, dictionaries, lists of model objects, and so forth.

django.core.cache.cache

from django.core.cache import cache

cache.set(key, value, timeout=DEFAULT_TIMEOUT, version=None) - This method is used to set cache.
Where,
key - It should be str.
value - It should be any object that can be pickled.
timeout - It is the time in seconds that the cache should be kept in the cache store. If
timeout is None, the cache will be stored indefinitely. A tiemout of 0 won't cache the value.

version - It is the version of the cache. If the version is not provided, it will be
automatically incremented by the cache framework.

cache.get(key, default=None, version=None)- This method is used to get cache, If the key doesn't exists in the cache, it returns None.
where,
default - This specifies which value to return if the object doesn't exist in the cache.
version - It is the version of the cache.

cache.add(key,value,timeout = DEFAULT_TIMEOUT, version =None)-This  method is used to add a key only if it doesn't already exist.

cache.get_or_set(key, default,timeout = DEFAULT_TIMEOUT, version= None)- This method is used to get a key's value or set a value if the key isn't in the cache.

cache.set_many(dict, timmout) - This method is used to set multiple values more efficiently, use set_many() to pass a dictionary of key-value pairs.

cache.get_many(keys, versions= NOne)- There's also a get_many() interface that only hits the cache once, get_many() returns a dictionary with all the keys you asked for that actually exist in the cache(and haven't expired).

cache.delete(key, version=None) - This method is used to delte keys explicity to clear the cache for a particular object.

cache.delete_many(list of keys, version)

cache.clear()- This method is used to delete all the keys in the cache. Be carefull with this clear() wll remove everything from cache, not just the keys set by your application.

cache.touch(key,timeout =DEFAULT_TIMEOUT, version = None) - This method iss used to set a new expiration for a key. touch() returns True if the key was successfully touched, False otherwise.

cache.incr(key, delta=1, version)
cache.decr(key, delta=1, version)
cache.close() - You can close the connection to your cache with close() if implemented by the cache backend.