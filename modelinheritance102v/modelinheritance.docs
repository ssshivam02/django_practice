Model Inheritance
--------------------------
Model Inheritance in Django works almost identically to the way normal class inheritance works in python. The base class should subclass django.db.models.Model

-> Abstract Base Classes
-> Multi-Table Inheritance
-> Proxy models

Abstract Base Classes:-
ABC are useful when you want to put some common information into a number of other models.
You write your base class and put abstract = True in the meta clas.
This model will then not be used to create any database table. Instead, when it is used as a base class for other models, Its fields will be added to those of the child class.
fields inherited from ABC can be overridden with  another field or value, or be removed with None.

Syntax:-
from django.db.import models

class CommonInfo(models.Model):
    name = models.CharField(max_length=100)
    age = models.IntegerField()
    clas Meta:
        abstract=True

# child
class Student(CommonInfo):
    roll_no = models.IntegerField()
    fees = models.IntegerField()    
                                     # by default abstract = False
# child
class Teacher(CommonInfo):
    subject = models.CharField(max_length=100)
    salary = models.IntegerField()

You can make an abstract base class that inherits from another abstract base class. You just need to remember explicitly set abstract=true each time.

In relationship ABC
from django.db import models

class Base(models.Model):
    m2m = models.ManyToManyField(
        otherModel,
        related_name = "%(app_label)s_%(class)s_related",
        related_query_name = "%(app_label)s_%(class)ss",
    )
    class Meta:
        abstract=True

---------------------------------------Mutli Table Inheritance------------------------------
In this inheritance each model have their own database table, which means base class and child class will have their own table.

The inheritance relationship introduces links between the child model and each of its parents (via an automatically- creted OneToOneField).

syntax:
from django.db import models
class Parent(models.Model):
    cname= models.CharField(max_length=70)
    city = models.CharField(max_length70)

class Student(Parent):
sname = models.CharField(max_length=70)
roll = models.IntegerField()

All of the fields of ExamCenter will also be available in Student, although the data will reside in a different database table.

---------------------------------------------Proxy Model------------------------------------------
Sometimes, however, you only want to change the Python behavior of a model- perhaps to change the defaults manager, or add a new method.
In this case, you can create a proxy model, which is a model that inherits from an existing
model but doesn't change its database structure.

Proxy models are declared like normal models. You tell Django that it's a proxy model by setting the proxy attribute of The Meta class to True.

syntax:-
from django.db import models
class ExamCenter(models.Model):
    cname = models.CharField(max_length=70)
    city = models.CharField(max_length=70)

class MyExamCenter(ExamCenter):
    class Meta:
        proxy = True
        ordering = ['city']

A proxy model must inherit from exactly one non-abstract model class.
You can't inherit from mutliple non-abc models.
A proxy model can inherit from any number of abstract model classes, providing they do not define any model fields.
A proxy model may also inherit from any number of proxy models that share a common non-abstract parent class.
If you don't specify any model managers on a proxy model, it inherits the managers from its model parents.
If you define a manager on the proxy model, it will become the default, although any managers defined on the parent classes will still be available.

