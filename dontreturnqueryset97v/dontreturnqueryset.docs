 Methods that do not return new QuerySets
 -----------------------------------------
 Retrieving a single object
 --------------------------
 get() - It returns one single object. If there is no result match it will raise DoesNotExist exception.
 If more than one item matches the get() query. It will raise MultipleObjectsReturned.

 Example:- Student.objects.get(pk=1)

 first() - It returns the first object matched by the queryset, or None if there is no matching object. If the QuerySet HAS no ordering defined, then the queryset is automaatcally ordered by the primary key.

 Example:- student_data = Students.objects.first()
 student_data = Student.objects.order_by('name').first()

 last():- It return the last object matched by the queryset, or None if there is no matching object. If the QuerySet has no ordering defined then the queryset is automatically ordered by the primary key.

 latest(*fields) - It returns the object in the table based on the given field(s).
 Example:- student_data = Student.objects.latest('pass_date')

 earliest(*fields) - It returns the earliest object in the table based on the given field(s).
 Example:- student_data= Student.objects.earliest('pass_date')

 exists()- It returns True if the QuerySet contais any results, and False if not. This tries to perform the query in the simplest and fastest way possible. But it does execute nearly the same query as a normal QuerySet query.
 Example:-
 student_data = Student.objects.all()
 if student_data.exists():
 print("Student data exists")

# single object
one_data = Student.objects.get(pk=1)
print(student_data.filter(pk = one_data.pk).exists())

# CRUD
# Create
# Create a new object
# Create a new object and save it to the database
create(**kwargs) - A convenience method for creating an object and saving it all in one step.
Example:-
student_data = Student.objects.create(name='John', age=20, pass_date='2020-5-4')

get_or_create(defaults = None, **kwargs)- A convenience method for looking up an object with the given kwargs(may be empty if your model has defaults for all fields), creating one if necessary.

It returns a tuple of (object, created),where object is the retrieved or created object and created is a boolean specifying whether a new object was created.

Example:- 
student_data, created = Student.objects.get_or_create(name='John', age=20, pass_date='2020-5-4')


#Update:-
Update(**kwargs) - Performs an SQL update query for the specific fields, and returns the number of rows mathced(which may not be equal to the number of rows updated if some rows already have the new value).
Example:
student_data= Student.objects.filter(id=3).update(name='king',marks=820)

# Update_or_create(defaults= None, **kwargs) - A convenience method for updating an object with the given kwargs, creating a new one if necessary. The defaults is a dictionary of(field, value) pairs used to update the object. The values in defaults can ve callables.
If returned a tuple of (object, created) where object is the created or updtaed object and created is a boolean specifying whether a new object was created.
The update_or_create method tries to fetch an object from database based on the given kwargs. If a match is found, it updates the fields passed in the defaults dictionary.
Example:-
student_data, created = Student.objects.update_or_create(name='king', roll=3, defaults={'name':'John'})

# bulk_create(objs, batch_sie=None, ignore_conflicts= False)- This method inserts the provided list of objects into the database in an efficent manner.
# It returns the number of objects inserted.
The models save() method will not be called, and the pre_save and post_save signals will not be sent.
# Example:-
objs = [
    Student(name='John', age=20, pass_date='2020-5-4'),
    Student(name='lolo', age=20, pass_date='2020-5-4'),
    Student(name='lulu', age=20, pass_date='2020-5-4'),
]
student_data= Student.objects.bulk_create(objs)

# bluk_update(objs, fields, batch_size = None)

# in_bluk(id_list=None, field_name='pk')
Example:-
student_data = Student.objects.in_bluk([1,2])
print(student_data[1].name)

student_data1 = Student.objects.in_bluk([]) # empty dictionary
print(student_data1)

student_data1 = Student.objects.in_bluk()  # give all objects

# delete
# delete() - Deletes the object.
# delete() - Deletes the object and returns the number of objects deleted.
# Example:-
# Delete one Record
student_data = Student.objects.get(id=1)
student_data.delete()

Delete in bluk
Example:- student_data = Student.objects.filter(marks = 50).delete()

Delete all records
example:- student_data = Student.objects.all().delete()

count()
It returns an integer representng the number of objects in the database matching the QuerySet. A count() call Performs
a SELECT COUNT(*) behind the scenes.
Example:-
student_data = Student.objects.filter(marks = 50).count()

student_data = student.objects.all()
print(student_data.count())


# not ended
explain(format= None, **options)